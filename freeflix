#!/bin/bash

# author: mathway

# Some convinience functions
# Cool function. Most probably not used :)
yesno()
{
    [ -z "$1" ] && echo 1
    echo "$1" | sed -n '/yes/Iq1 ; /true/Iq1 ; /on/Iq1' && echo 1 || echo 0
}

warn()
{
    echo "Warning: $*" >&2
}

err()
{
    echo "Error: $*"
    clean_tmp
    exit 1
}

# Remove all temporary files that were generated during execution
clean_tmp()
{
    [ "${verbose}" = '1' ] && rm -rfv "$tmpdir" || rm -rf "$tmpdir"
    if ! echo "${BACKEND_OPTS}" | sed -nE "/\W?-r\W?/q1"; then
	[ "${verbose}" = '1' ] && rm -rfv "/tmp/torrent-stream" || rm -rf "/tmp/torrent-stream"
    fi
}

# Exit in a clean way
clean_exit()
{
    clean_tmp
    echo "Goodbye!"
    exit 0
}

# Show help
show_help()
{
    local opts
    declare -A opts
    printf "Usage: $1 [options...] description\n"
    opts["-s, --site <torrent site>"]="Select torrent site from which to fetch magnet links."
    opts["-l, --listsites"]="Use currently supported torrent sites."
    opts["-m, --max-links <n>"]="Show maximum of n torrents."
    opts["-f, --fast"]="Alias for --max-links 1."
    opts["-J, --justdoit"]="Defaults that just work."
    opts["-W, --backend-opt <option>"]="Pass option to backend."
    opts["-B, --backend <backend>"]="Backend to use for magnet link."
    opts["-v, --verbose"]="Turn on verbose mode."
    opts["-h, --help"]="Show help."
    for o in "${!opts[@]}"; do
	printf "\t%-30s\t%s\n" "$o" "${opts[$o]}"
    done
}

# Since torrent sites can represent some text in
# non-ascii encoding, here we do some magic to make output more appealing to see.
clength() { clength=${#1}; }
blength() { local LC_ALL=C; blength=${#1}; }
align() {
    local width="$1" arg="$2" blength clength
    clength "$arg"; blength "$arg"
    local i
    if ((clength <= width)) ; then
	printf "%s%*s" "$arg" "$((width - clength))" ""
    else
	for ((i=0; i < width; i++)) ; do
	    printf "%s" "${arg:$i:1}"
	done
    fi
}


# Mappings between torrent site domain names and corresponding handler functions
declare -A sites

# piratebay.party parser
sites["piratebay.party"]="pirate_bay"
pirate_bay()
{
    local tmp_url="$(mktemp --tmpdir=${tmpdir})"
    local tmp_entry="$(mktemp --tmpdir=${tmpdir})"
    local tmp_parse="$(mktemp --tmpdir=${tmpdir})"
    local descr date size seeds leechs link
    
    curl -s -o "${tmp_url}" "https://thepiratebay.party/search/${query}/1/99/200"
    local i=0
    while grep -E -C3 -m1 -e 'magnet:\?' > "${tmp_entry}"; do
	IFS="$(printf '\x01')" read -r descr date size seeds leechs \
	   <<< "$(grep -Eoe '>[^<]+<' ${tmp_entry} | tr -d '><' | sed 's/\&amp;/&/ ; s/\&nbsp;/ /' | tr '\n' '\001')"
	link=$(grep -Eoe 'magnet:\?[^"]*' ${tmp_entry})
	printf "%s\x01" "${descr}" "${size}" "${seeds}" "${leechs}" "${link}" >> $entries
	echo >> $entries

	# Here for compliance with --max-links option.
	((i++))
	((i==${max_sites})) && break
    done < "${tmp_url}" 
}

sites["1337x.wtf"]="1337x"
1337x()
{
    local tmp_url="$(mktemp --tmpdir=${tmpdir})"
    local tmp_entry="$(mktemp --tmpdir=${tmpdir})"
    local descr date size seeds leechs unused url_link
    curl -s -o "${tmp_url}" "https://1337x.wtf/search/${query}/1/"
    local i=0
    while grep -E -m1 -A4 -e 'torrent\/[^"]*' > ${tmp_entry}; do
	sed -i 's_</i>[[:digit:]]*</span>__' "${tmp_entry}"
	IFS="$(printf '\x01')" read  -r descr seeds leechs date size unused unused \
	   <<<"$(grep -Eoe '>[^<]+<' ${tmp_entry} | tr -d '<>' | tr '\n' '\001')"
	url_link="$(grep -Eoe 'torrent\/[^"]*' ${tmp_entry})"
	magnet_link="$(curl -s "https://1337x.wtf/$url_link" | grep -m1 -o 'magnet:?[^"]*')"
	printf "%s\x01" "$descr" "$size" "$seeds" "$leechs" "$magnet_link" >> $entries
	echo >> $entries
	
	# Here for compliance with --max-links option.
	((i++))
	((i==${max_sites})) && break
    done < ${tmp_url}
}

# rutracker.org parser
# Note that in order to use it, you need an account, so first register.
# Mostly useful for russian-speaking users.

sites["rutracker.org"]="rutracker"
rutracker()
{
    local tmp_entry tmp_cookies tmp_url
    local descr size seeds leechs url_link magnet_link
    local cookies_exist=0
    tmp_entry=$(mktemp --tmpdir=${tmpdir})
    tmp_url=$(mktemp --tmpdir=${tmpdir})
    tmp_cookies="$HOME/.freeflix/cookies"
    if [ ! -d "$HOME/.freeflix" ]; then
	mkdir -p "$HOME/.freeflix" >/dev/null 2>&1 || err "Can't create .freeflix dir in $HOME"
	chmod 700 "$HOME/.freeflix" >/dev/null 2>&1 || err "Can't change permissions of .freeflix dir in $HOME"
    fi
    [ -r "$HOME/.freeflix/cookies" ] && cookies_exist=1
    local tries
    local cookies_work=0
    if [ "$cookies_exist" = "1" ]; then
	tries=1
	while [ $tries -le 3 ]; do
	    curl -s -b ${tmp_cookies} -o ${tmp_url} "https://rutracker.org/forum/tracker.php?nm=${query}" >/dev/null 2>&1
	    grep -asq 'wbr t-title' ${tmp_url} && break
	    sleep 0.5
	    tries=$(( tries + 1 ))
	done
	[ "$tries" -eq "4" ] || cookies_work=1
    fi
    if [ "$cookies_work" = "0" ]; then
	rm -f "$HOME/.freeflix/cookies" >/dev/null 2>&1
	for ((tries=0; tries<3; tries++)); do
	    username=$(printf '' | dmenu -l 0 -p 'Username: ')
	    password=$(printf '' | dmenu -l 0 -p 'Password: ')
	    curl -s -c ${tmp_cookies} -X POST \
		 -d "login_username=${username}" -d "login_password=${password}" -d 'login=вход' \
		 'https://rutracker.org/forum/login.php' >/dev/null 2>&1
	    curl -s -b ${tmp_cookies} -o ${tmp_url} "https://rutracker.org/forum/tracker.php?nm=${query}" >/dev/null 2>&1
	    grep -asq 'wbr t-title' ${tmp_url} && break
	    sleep 1
	done
	[ "$tries" = "3" ] && err "Can't parse rutracker :("
    fi
    chmod 600 "$HOME/.freeflix/cookies" >/dev/null 2>&1 || err "Can't set read-only permissions for cookie file"
    local i=0
    while grep -A26 -m1 -Ee 'wbr t-title' > ${tmp_entry} ; do
	# line mapping
	# 2-descr 10-size 12-seeds 13-leechs
	grep "проверено" ${tmp_entry} >/dev/null || continue
	url_link=$(grep -m1 -o 'viewtopic\.php[^"]*' ${tmp_entry})
	descr=$(sed -n 2p < ${tmp_entry} | grep -Eoe '>[^<]+<' | tr -d '<>' | tr '\n' ' ')
	size=$(sed -n 10p ${tmp_entry} | grep -Eoe '>[[:digit:]][^<]*<' | sed -E 's/\&nbsp;/ /; s/(MB|GB|TB)(.*)/\1/' | tr -d '<>')
	seeds=$(sed -n 12p ${tmp_entry} | grep -Eoe '>[[:digit:]][^<]*<' | tr -d '<>')
	leechs=$(sed -n 13p ${tmp_entry} | grep -Eoe '>[[:digit:]][^<]*<' | tr -d '<>')
	magnet_link=$(curl -b ${tmp_cookies} -s "https://rutracker.org/forum/${url_link}" | grep -m1 -oe 'magnet:?[^"]*')
	[ -n "$magnet_link" ] && { printf "%s\x01" "$descr" "$size" "$seeds" "$leechs" "$magnet_link" >> ${entries}
				   echo >> ${entries} ; }
	# As freeflix interface dictates, we need that for --max-links option
	((i++))
	((i==${max_sites})) && break
    done <<<"$(iconv -c -f cp1251 -t utf-8//IGNORE ${tmp_url})" # Re-encoding from cp1251 to utf-8
}


# Terminate gracefully whenever user wishes to do so.
trap "clean_exit" SIGINT

# Directory where temporary files will be saved
tmpdir="$(mktemp --tmpdir -d freeflix.XXX)"

# Menu program which will be used for prompting a user
menu="dmenu -l 15 -i"

# Maximum of torrent links for choosing
max_sites=15

# torrent site to use
site=

# Backend to use
DEFAULT_BACKEND=peerflix
DEFAULT_BACKEND_OPTS='-r -l -v'
BACKEND=${DEFAULT_BACKEND}

# Cumulative variable, containing options to backend (peerflix)
BACKEND_OPTS=

# Why not to let the user control the program via options?
while [[ $# -gt 0 ]] ; do
    case "$1" in
	-s|--site) shift
		   site="$1"
		   ;;
	-l|--listsites)	    i=1
			    for s in "${!sites[@]}"; do
				printf "[%d]\t%s\n" "$i" "$s"
				((i++))
			    done
			    clean_exit
			    ;;
	-m|--max-links) shift
			max_sites="$1"
			;;
	-f|--fast) max_sites=1
		   ;;
	-v|--verbose)  verbose=1
		       ;;
	-W|--backend-opt)  shift
			   BACKEND_OPTS="${BACKEND_OPTS} $1"
			   ;;
	-B|--backend) shift
		      BACKEND="$1"
		      ;;
	-J|--justdoit) BACKEND_OPTS="${DEFAULT_BACKEND_OPTS} ${BACKEND_OPTS}"
		       ;;
	-h|--help) show_help "$0"
		   clean_exit
		   ;;
	-*) show_help "$0"
	    err "Unrecognized option provided"
	    ;;
	*) query="${query} $1"
	   ;;
    esac
    shift
done

[ -n "${verbose}" ] || exec 2>/dev/null

shift $(($OPTIND - 1))

# No query on the CL - prompt user now
if [ -z "${query}" ]; then
    query=$(printf "" | dmenu -p 'Your search: ')
fi
# Url-encode spaces in the query
query=${query// /%20}

# Determining which torrent site actually to use
to_call=
if ! sed -n '/[^[:digit:]]/q1' <<<"$site"; then
    for s in "${!sites[@]}"; do

	if [ "$s" = "${site}" ]; then
	    to_call="${sites[${s}]}"
	fi
    done
else
    i=1
    for s in "${!sites[@]}"; do
	if [ "$i" = "${site}" ]; then
	    to_call="${sites[${s}]}"
	fi
	((i++))
    done
fi
[ -n "${to_call}" ] || to_call=${sites["$(echo "${!sites[@]}" | tr ' ' '\n' | dmenu -i)"]}
[ -n "${to_call}" ] || err "No supported torrent site supplied."
unset s

# Some verbose(actually debug) info
echo "Query is \"${query}\"" >&2
echo "site is \"${site}\"" >&2
echo "to_call is \"${to_call}\"" >&2
echo "-------------------------" >&2

entries="$(mktemp --tmpdir=${tmpdir})"

# Calling a handler
${to_call}

# Handler wrote parsed torrent links to the ${entries} file. 
# Here's it's format: Description:Size:Seeds:Leechs:Magnet_link\n...,
# where `:' is 0x01 byte.
# Now the job here is to unpack that file and prompt user to choose torrent link.
link="$(mktemp --tmpdir=${tmpdir})"
i=1
if ((max_sites > 1)) ; then
    while IFS= read -r entry; do
	IFS="$(printf '\x01')" read -r descr size seeds leechs link <<< "$entry"
	printf "[%2.2s] [" "${i}"
	align 70 "${descr}"
	printf "] [%10s] [S %3s] [L %3s] \n" "${size}" "${seeds}" "${leechs}"
	((i++))
    done < ${entries} |
    	${menu} |
	grep -Eoe '[[:digit:]]+' |
	sed -n 1p | 
	xargs -I{} sed -n '{}p' "${entries}" |
	cut -d"$(printf '\x01')" -f5 > ${link}
else
    sed -n 1p ${entries} | cut -d"$(printf '\x01')" -f5 > ${link}
fi
unset i

echo "BACKEND_OPTS = \"${BACKEND_OPTS}\"" >&2
# Job finished. Let's watch the film!

[ -s "${link}" ] && ${BACKEND} "$(cat ${link})" ${BACKEND_OPTS}

clean_exit
